import hashlib
import logging
from global_transferable_entities.user import User
from state_constructor_parts.action import ActionChangeUserVariableToInput, ActionChangeStage, Action, ActionBack, ActionChangeUserVariable
from bot import Bot
from message_parts.message import Message, MessageKeyboard, MessageKeyboardButton, MessagePicture
from global_transferable_entities.scope import Scope
from state_constructor_parts.stage import Stage
from statistics_entities.stage_stats import StageStatsVisitCount
from statistics_entities.user_stats import UserStatsVisitCount, UserStatsCurrentStage

if __name__ == '__main__':

    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                        level=logging.INFO,
                        filename='log.txt')
    logging.info("Program started")

    Stage.set_common_statistics([StageStatsVisitCount()])
    User.set_common_statistics([UserStatsVisitCount(),
                                UserStatsCurrentStage()])

    # --- Helper methods ---

    def count_right_answer(scope, user, input_string, bot):
        right_answers_count = user.try_get_variable("right_answers_count", 0)
        right_answers_count += 1
        user.set_variable("right_answers_count", right_answers_count)

    def generate_final_text(scope, user):
        right_answers_count = user.try_get_variable("right_answers_count", 0)
        if right_answers_count == 3:
            password = hashlib.sha256((str(user.chat_id) + "2").encode()).hexdigest()[:4]
            return f"‚úî –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç, –≤–∞—à –ø–∞—Ä–æ–ª—å: {password}"
        else:
            return "‚ùå –í—ã –æ—Ç–≤–µ—Ç–µ–ª–∏ –Ω–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑"

    def zero_answers(scope, user, input_string, bot):
        user.set_variable("right_answers_count", 0)

    def generate_final_keyboard(scope, user):
        right_answers_count = user.try_get_variable("right_answers_count", 0)
        if right_answers_count == 3:
            return None
        else:
            return MessageKeyboard(
                [
                    MessageKeyboardButton(
                        text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑",
                        actions=[ActionChangeStage("Main"), Action(zero_answers)]
                    )
                ]
            )

    # --- State constructor ---

    _scope = Scope([

        Stage(name="NewUser",
              user_input_actions=[ActionChangeStage("Main"), Action(zero_answers)]),

        Stage(name="Main",
              message=Message(
                  text="üòé –ë–æ—Å—Å! –û–±–∞–Ω–∫—Ä–æ—Ç–∏–≤—à–∞—è—Å—è –∫–æ–º–ø–∞–Ω–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞–º –Ω–µ—Ñ—Ç—å. –¶–µ–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã –Ω–∞ –≤—Å–µ –≤–∏–¥—ã. –ö–∞–∫—É—é –±–µ—Ä–µ–º?\n\n1) –ë–µ—Ä–µ–º —Ç–≤–µ—Ä–¥—É—é\n2) –ë–µ—Ä–µ–º —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—É—é\n3) –ë–µ—Ä–µ–º –ª–µ–≥–∫—É—é",
                  keyboard=MessageKeyboard(
                      buttons=[
                          MessageKeyboardButton(text="1",
                                                actions=[ActionChangeStage("Stage2")]),
                          MessageKeyboardButton(text="2",
                                                actions=[ActionChangeStage("Stage2")]),
                          MessageKeyboardButton(text="3",
                                                actions=[ActionChangeStage("Stage2"), Action(count_right_answer)])
                      ]
                  )
              )),


        Stage(name="Stage2",
              message=Message(
                  text="üôÇ –ù–∞—á–∞–ª—å–Ω–∏–∫, –º—ã –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–≤–æ–¥, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–µ–¥–µ—Ç –∫–æ–º–∏—Å—Å–∏—è, –≥–¥–µ –µ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å?\n\n1) –ú–µ—Å—Ç–æ –Ω–µ—Ñ—Ç–µ–¥–æ–±—ã—á–∏ \n2) –ú–µ—Å—Ç–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –Ω–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç–æ–≤ \n3) –ú–µ—Å—Ç–æ —Å–∫–æ–ø–ª–µ–Ω–∏—è –Ω–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç–æ–≤",
                  keyboard=MessageKeyboard(
                      buttons=[
                          MessageKeyboardButton(text="1",
                                                actions=[ActionChangeStage("Stage3")]),
                          MessageKeyboardButton(text="2",
                                                actions=[ActionChangeStage("Stage3"), Action(count_right_answer)]),
                          MessageKeyboardButton(text="3",
                                                actions=[ActionChangeStage("Stage3")]),
                      ]
                  )
              )),

        Stage(name="Stage3",
              message=Message(
                  text="üí∏ üòé –ë–æ—Å—Å, –Ω–æ–≤–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞—à–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∏–∑ –ö–∏—Ç–∞—è –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ, –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–∞ —á–µ–º –µ–µ –ø–æ–≤–µ–∑—É—Ç.\n\n1) –í–µ–∑–∏—Ç–µ –Ω–∞ —Ç–∞–Ω–∫–µ—Ä–µ \n2) –ü–µ—Ä–µ–≤–µ–∑–∏—Ç–µ –Ω–µ—Ñ—Ç–µ–ø—Ä–æ–≤–æ–¥–æ–º \n3) –í–µ–∑–∏—Ç–µ –ø–æ —Ç—Ä–∞—Å—Å–µ",
                  keyboard=MessageKeyboard(
                      buttons=[
                          MessageKeyboardButton(text="1",
                                                actions=[ActionChangeStage("Stage4")]),
                          MessageKeyboardButton(text="2",
                                                actions=[ActionChangeStage("Stage4"), Action(count_right_answer)]),
                          MessageKeyboardButton(text="3",
                                                actions=[ActionChangeStage("Stage4")]),
                      ]
                  )
              )),

        Stage(name="Stage4",
              message=Message(
                  text=generate_final_text,
                  keyboard=generate_final_keyboard))



    ], main_stage_name="Main")

    logging.info("Program started")

    bot = Bot('<PASTE_YOUR_TOKEN_HERE>', _scope)

    bot.start_polling(poll_interval=2,
                      poll_timeout=1)
